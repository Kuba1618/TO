package pl.kielce.tu;

import java.util.Random;

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.cfg.Configuration;

import pl.kielce.entity.Course;
import pl.kielce.entity.persons.Assistant;
import pl.kielce.entity.persons.AssistantProfessor;
import pl.kielce.entity.persons.PhysicalWorker;
import pl.kielce.entity.persons.Professor;
import pl.kielce.entity.persons.Student;
import pl.kielce.entity.persons.Teacher;
import pl.kielce.entity.persons.TechnicalWorker;
import pl.kielce.entity.vehicles.Bike;
import pl.kielce.entity.vehicles.Car;
import pl.kielce.entity.vehicles.Motorcycle;
import pl.kielce.entity.vehicles.Scooter;
import pl.kielce.entity.vehicles.Vehicle;

public class NewTest {

		public static void main(String[] args) {
			//Faker faker = new Faker(new Locale("pl-PL"));
			
			SessionFactory sessionFactory = new Configuration().configure().buildSessionFactory();
			Session session = sessionFactory.openSession();
			
			session.beginTransaction();
			
			Random generator = new Random();
			
			for(int i = 0; i < 10; i++) {
				int numberOfTeacherChilds = generator.nextInt(3); //generate number of Teacher child based on number of teacher class child
				int numberOfVehicleChilds = generator.nextInt(4);
				
				Course course = new Course();
				course.generateCourse();
				
			    Teacher teacher = null;
			    Vehicle teacherVehicle = randomAndGenerateVehicle();
			    switch(numberOfTeacherChilds) {
				    case 1:{
				    	Professor prof = new Professor();
						prof.generateProfessor();
						prof.setVehicle(teacherVehicle);
						prof.setCourse(course);
						teacher = prof;
						break;
				    }
				    case 2:{
				    	AssistantProfessor assistantProf = new AssistantProfessor();
				    	assistantProf.generateAssistantProfessor();
				    	assistantProf.setVehicle(teacherVehicle);
				    	assistantProf.setCourse(course);
				    	teacher = assistantProf;
				    	break;
				    }
				    
			    	case 3:{
			    		Assistant assistant = new Assistant();
			    		assistant.generateAssistant();
			    		assistant.setVehicle(teacherVehicle);
			    		assistant.setCourse(course);
			    		teacher = assistant;
			    		break;
			    	}
			    	default: {
			    		Assistant assistant = new Assistant();
			    		assistant.generateAssistant();
			    		assistant.setVehicle(teacherVehicle);
			    		assistant.setCourse(course);
			    		teacher = assistant;
			    		break;
			    	}
			    }
			  
					
				Student student = new Student();
				student.generateStudent();
				student.setVehicle(randomAndGenerateVehicle());
				student.setCourse(course);
				
				PhysicalWorker pW = new PhysicalWorker();
				pW.generatePhysicalWorker();
				pW.setVehicle(randomAndGenerateVehicle());
			    
				TechnicalWorker tW = new TechnicalWorker();
				tW.generateTechnicalWorker();
				tW.setVehicle(randomAndGenerateVehicle());
				
				course.setTeacher(teacher);
				course.setStudent(student);
				session.save(course); // before saving the student & teacher (teacher child's)
				session.save(student.getVehicle());
				session.save(student);
				session.save(teacher.getVehicle());
				session.save(teacher); 
				session.save(pW.getVehicle());
				session.save(pW);	
				session.save(tW.getVehicle());
				session.save(tW);
			}
			
			session.getTransaction().commit();
			
			session.close();

		}
		
		public static Vehicle randomAndGenerateVehicle() {
			Random generator  = new Random();
			int numberKindOfVehicle = 4;
			
			Vehicle vehicle = null;
			switch(generator.nextInt(numberKindOfVehicle)) {
				case 1: {
					Car car = new Car();
				    car.generateCar();
				    vehicle = car;
					break;
				}
				case 2: {
					Motorcycle motorcycle = new Motorcycle();
					motorcycle.generateMotorcycle();
					vehicle = motorcycle;
					break;
				}
				case 3:{
					Bike bike = new Bike();
					bike.generateBike();
					vehicle = bike;
					break;
				}
				case 4: {
					Scooter scooter = new Scooter();
					scooter.generateScooter();
					vehicle = scooter;
					break;
				}
				default: {
					Scooter scooter = new Scooter();
					scooter.generateScooter();
					vehicle = scooter;
					break;
				}
			}
			
			return vehicle;
		}
		
}

 

