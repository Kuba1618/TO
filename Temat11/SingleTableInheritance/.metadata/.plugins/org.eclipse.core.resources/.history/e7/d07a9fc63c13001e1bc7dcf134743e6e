package pl.kielce.entity.persons;

import java.util.Locale;

import javax.persistence.Column;
import javax.persistence.Embedded;
import javax.persistence.Entity;
import javax.persistence.EnumType;
import javax.persistence.Enumerated;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.Inheritance;
import javax.persistence.InheritanceType;

import com.github.javafaker.Faker;

@Entity
@Inheritance(strategy = InheritanceType.SINGLE_TABLE)
public class Person {
    @Id
    @GeneratedValue
    private int personId;
    @Column(name="first_name")
    private String firstName;
    @Column(name="last_name")
    private String lastName;
    @Enumerated(EnumType.STRING)
    private Gender gender;
    @Embedded
    private Address addressInfo;
    @Column(name="phone")
    private int phone;

    public int getPersonId() {
        return personId;
    }

    public void setPersonId(int personId) {
        this.personId = personId;
    }

    public String getFirstName() {
        return firstName;
    }

    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    public String getLastName() {
        return lastName;
    }

    public void setLastName(String lastName) {
        this.lastName = lastName;
    }

    public Gender getGender() {
        return gender;
    }

    public void setGender(Gender gender) {
        this.gender = gender;
    }

    public Address getAddressInfo() {
        return addressInfo;
    }

    public void setAddressInfo(Address addressInfo) {
        this.addressInfo = addressInfo;
    }

    public int getPhone() {
        return phone;
    }

    public void setPhone(int phone) {
        this.phone = phone;
    }

    public void generatePerson()
    {
        Faker faker = new Faker(new Locale("pl-PL"));

        setFirstName(faker.name().firstName());
        setLastName(faker.name().lastName());
        setGender(Gender.randomGender());
        setPhone(Integer.valueOf(faker.phoneNumber().subscriberNumber(9) + ""));
        
        Address addressInfo = new Address();
        addressInfo.generateAddressData();
        setAddressInfo(addressInfo);
    }

}
